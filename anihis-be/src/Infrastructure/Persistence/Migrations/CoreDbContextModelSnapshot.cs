// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using anihis.Infrastructure.Persistence;

#nullable disable

namespace anihis.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("anihis.Domain.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BreedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identification")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MarkingDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pedigree")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Sterilized")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SterilizedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<string>("VIIssuesAPassport")
                        .HasColumnType("TEXT");

                    b.Property<string>("Warning")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiagnosisType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VeterinaryClinicId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnimalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClinicalExamination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Control")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherFindings")
                        .HasColumnType("TEXT");

                    b.Property<string>("Recommendation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Therapy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiagnosisNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("HealthRecordDiagnoses");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrescriptionNote")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriptionPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriptionQuantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriptionTotal")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriptionVAT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("HealthRecordPrescriptions");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServicePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceQuantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTotal")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceVAT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.HasIndex("ServiceId");

                    b.ToTable("HealthRecordServices");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccount")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VeterinaryClinicId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VeterinarianId");

                    b.HasIndex("VeterinaryClinicId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JM")
                        .HasColumnType("TEXT");

                    b.Property<string>("MainPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriptionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VeterinaryClinicId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VeterinaryClinicId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("anihis.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("anihis.Domain.Entities.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VaccinationDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineSerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("anihis.Domain.Entities.VeterinaryClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VeterinaryClinics");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Owner", b =>
                {
                    b.HasBaseType("anihis.Domain.Entities.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCardNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDateTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnpaidExpenses")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Warning")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Veterinarian", b =>
                {
                    b.HasBaseType("anihis.Domain.Entities.User");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinaryClinicId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("VeterinaryClinicId");

                    b.HasDiscriminator().HasValue("Veterinarian");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Animal", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId");

                    b.HasOne("anihis.Domain.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Breed", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Diagnosis", b =>
                {
                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VeterinaryClinic");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordDiagnosis", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.HealthRecord", "HealthRecord")
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("HealthRecord");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordPrescription", b =>
                {
                    b.HasOne("anihis.Domain.Entities.HealthRecord", "HealthRecord")
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthRecord");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("anihis.Domain.Entities.HealthRecordService", b =>
                {
                    b.HasOne("anihis.Domain.Entities.HealthRecord", "HealthRecord")
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthRecord");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Manufacturer", b =>
                {
                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VeterinaryClinic");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Payment", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Veterinarian");

                    b.Navigation("VeterinaryClinic");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("VeterinaryClinic");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Service", b =>
                {
                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VeterinaryClinic");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Vaccination", b =>
                {
                    b.HasOne("anihis.Domain.Entities.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("anihis.Domain.Entities.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("anihis.Domain.Entities.Veterinarian", b =>
                {
                    b.HasOne("anihis.Domain.Entities.VeterinaryClinic", "VeterinaryClinic")
                        .WithMany()
                        .HasForeignKey("VeterinaryClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VeterinaryClinic");
                });
#pragma warning restore 612, 618
        }
    }
}
